"""Create new table ApiToken

Revision ID: 61620680445d
Revises: 7748d3d22925
Create Date: 2023-10-19 02:12:47.615471

"""
import sqlalchemy as sa
import sqlalchemy_utils
import sqlalchemy_utils
import uuid
from sqlalchemy.dialects import postgresql
from pytz import timezone as pytz_timezone
from babel import Locale
from alembic import op
from sqlalchemy import orm
from sqlalchemy_utils import UUIDType
from sqlalchemy.ext.declarative import declarative_base

# revision identifiers, used by Alembic.
revision = "61620680445d"
down_revision = "7748d3d22925"
branch_labels = None
depends_on = None

base = declarative_base()


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "api_token",
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column(
            "email",
            sqlalchemy_utils.types.email.EmailType(length=255),
            nullable=True,
        ),
        sa.Column("jti", sa.String(length=60), nullable=True),
        sa.Column("days_duration", sa.Integer(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column(
            "timezone",
            sqlalchemy_utils.types.timezone.TimezoneType(backend="pytz"),
            default=pytz_timezone("Europe/Paris"),
            nullable=True,
        ),
        sa.Column(
            "locale",
            sqlalchemy_utils.types.locale.LocaleType(),
            default=Locale("en", "US"),
            nullable=True,
        ),
        sa.Column(
            "data", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("role", sa.String(length=30), nullable=True),
        sa.Column("has_avatar", sa.Boolean(), nullable=True),
        sa.Column(
            "id",
            sqlalchemy_utils.types.uuid.UUIDType(binary=False),
            default=uuid.uuid4,
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("jti"),
        sa.UniqueConstraint("name"),
    )
    with op.batch_alter_table("department_link", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "id",
                sqlalchemy_utils.types.uuid.UUIDType(binary=False),
                default=uuid.uuid4,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                "api_token_id",
                sqlalchemy_utils.types.uuid.UUIDType(binary=False),
                default=None,
                nullable=True,
            )
        )
        batch_op.alter_column(
            "person_id", existing_type=sa.UUID(), nullable=True, default=None
        )
        batch_op.alter_column(
            "department_id", existing_type=sa.UUID(), nullable=False
        )
        batch_op.create_foreign_key(
            None, "api_token", ["api_token_id"], ["id"]
        )

    base = declarative_base()

    class DepartmentLink(base):
        __tablename__ = "department_link"
        id = sa.Column(
            UUIDType(binary=False), nullable=True, default=uuid.uuid4
        )
        person_id = sa.Column(
            UUIDType(binary=False),
            default=None,
            primary_key=True,
        )
        api_token_id = sa.Column(
            UUIDType(binary=False),
            default=None,
        )
        department_id = sa.Column(
            UUIDType(binary=False),
            nullable=False,
            primary_key=True,
        )

    bind = op.get_bind()
    session = orm.Session(bind=bind)
    department_links = session.query(DepartmentLink).all()
    for department_link in department_links:
        department_link.id = uuid.uuid4()
    session.commit()

    with op.batch_alter_table("department_link", schema=None) as batch_op:
        batch_op.alter_column(
            "id", existing_type=sa.UUID(), nullable=False, default=uuid.uuid4
        )
        batch_op.create_primary_key(None, ["id"])

    with op.batch_alter_table("project_person_link", schema=None) as batch_op:
        batch_op.drop_constraint("project_person_link_pkey", type_="primary")
        batch_op.add_column(
            sa.Column(
                "id",
                sqlalchemy_utils.types.uuid.UUIDType(binary=False),
                default=uuid.uuid4,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                "api_token_id",
                sqlalchemy_utils.types.uuid.UUIDType(binary=False),
                default=None,
                nullable=True,
            )
        )
        batch_op.alter_column(
            "person_id", existing_type=sa.UUID(), nullable=True, default=None
        )
        batch_op.create_foreign_key(
            None, "api_token", ["api_token_id"], ["id"]
        )

    class ProjectPersonLink(base):
        __tablename__ = "project_person_link"
        id = sa.Column(
            UUIDType(binary=False), nullable=True, default=uuid.uuid4
        )
        person_id = sa.Column(
            UUIDType(binary=False),
            default=None,
            primary_key=True,
        )
        api_token_id = sa.Column(
            UUIDType(binary=False),
            default=None,
        )
        project_id = sa.Column(
            UUIDType(binary=False),
            nullable=False,
            primary_key=True,
        )
        shotgun_id = sa.Column(sa.Integer)

    bind = op.get_bind()
    session = orm.Session(bind=bind)
    project_person_links = session.query(ProjectPersonLink).all()
    for project_person_link in project_person_links:
        project_person_link.id = uuid.uuid4()
    session.commit()

    with op.batch_alter_table("project_person_link", schema=None) as batch_op:
        batch_op.alter_column(
            "id", existing_type=sa.UUID(), nullable=False, default=uuid.uuid4
        )
        batch_op.create_primary_key(None, ["id"])

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("project_person_link", schema=None) as batch_op:
        batch_op.drop_constraint(
            "project_person_link_pkey", type_="foreignkey"
        )
        batch_op.alter_column(
            "person_id", existing_type=sa.UUID(), nullable=False
        )
        batch_op.drop_column("api_token_id")
        batch_op.drop_column("id")
        batch_op.create_primary_key(None, ["project_id", "person_id"])

    with op.batch_alter_table("department_link", schema=None) as batch_op:
        batch_op.drop_constraint("department_link_pkey", type_="foreignkey")
        batch_op.drop_column("api_token_id")
        batch_op.drop_column("id")
        batch_op.alter_column(
            "department_id", existing_type=sa.UUID(), nullable=False
        )
        batch_op.alter_column(
            "person_id", existing_type=sa.UUID(), nullable=False
        )

    op.drop_table("api_token")
    # ### end Alembic commands ###
